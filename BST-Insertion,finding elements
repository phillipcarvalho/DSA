#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

struct node{
    struct node* left;
    int data;
    struct node* right;
};
struct node* insert(struct node*  tree,int e){
    struct node* temp=(struct node*)malloc(sizeof(struct node ));
    if(tree==NULL){
        temp->data=e;
        temp->left=NULL;
        temp->right=NULL;
        tree=temp;
    }
    else if(e<tree->data){
        tree->left=insert(tree->left,e);
    }
    else{
        tree->right=insert(tree->right,e);
    }
    return tree;
    
}
int findmin(struct node* tree){
    if(tree==NULL){
        return -1;
    }
    else if(tree->left==NULL){
        return tree->data;
    }
    else{
        return findmin(tree->left);
    }
}
int findmax(struct node* tree){
    if(tree==NULL){
        return -1;
    }
    else if(tree->right==NULL){
        return tree->data;
    }
    else{
        return findmin(tree->right);
    }
}
bool search(struct node* tree, int e){
    if(tree==NULL){
        return false;
    }
    else if(e==tree->data){
        return true;
    }
    else{
        return search(tree->left,e)||search(tree->right,e);
    }
}
    
    

void preorder(struct node* tree){
    if(tree!=NULL){
        printf("%d",tree->data);
        preorder(tree->left);
        preorder(tree->right);
    }
}
int main(){
    int n;
    scanf("%d",&n);
    int x;
    struct node*  bst=NULL;
    for(int i=0;i<n;i++){
        scanf("%d",&x);
        bst=insert(bst,x);
    }
    //preorder(bst);
    printf("%d\n",findmin(bst));
     printf("%d\n",findmax(bst));
     if(search(bst,3)==true){
         printf("YES");
     }
    return 0;
}
